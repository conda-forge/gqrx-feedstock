{% set name = "gqrx" %}
{% set version = "2.17.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/gqrx-sdr/{{ name }}/archive/v{{ version }}.tar.gz
  sha256: 8d5f70390d3935278527cc7aa6344d6ec0201bce156851c610e88acd6102c356
  patches:
    - 0001-Don-t-build-a-resource-file-for-the-executable-on-Wi.patch  # [win]
    - 0002-Don-t-build-a-win32-app-instead-of-a-console-app.patch  # [win]

build:
  number: 0
  skip: true  # [(linux and not x86_64) and str(gnuradio_extra_pin).startswith("3.8")]
  skip: true  # [(osx and not x86_64) and str(gnuradio_extra_pin).startswith("3.8")]
  ignore_run_exports_from:
    # see below, workaround involving adding python to host
    - python  # [build_platform != target_platform]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - ninja
    - pkg-config  # [not win]
    # cross-compilation requirements
    - python                              # [build_platform != target_platform]
    - cross-python_{{ target_platform }}  # [build_platform != target_platform]
    - pybind11                            # [build_platform != target_platform and not str(gnuradio_extra_pin).startswith("3.8")]
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
  host:
    # boost needed for a few headers separately from gnuradio dep
    - boost-cpp
    - gnuradio-core  # [not gnuradio_extra_pin]
    - gnuradio-core {{ gnuradio_extra_pin }}.*  # [gnuradio_extra_pin]
    - gnuradio-osmosdr
    # needed while on cos6 sysroot, make sure we get cos6-compatible libusb
    # (this does not add a run_exports for libusb)
    - libusb-cos6  # [linux and cdt_name=='cos6']
    - pybind11  # [not str(gnuradio_extra_pin).startswith("3.8")]
    - pulseaudio  # [linux]
    - qt-main
    - volk  # [not str(gnuradio_extra_pin).startswith("3.8")]
    - volk 2.5  # [str(gnuradio_extra_pin).startswith("3.8")]
    # pulled in by gnuradio-core and linked against, so include explicitly
    - log4cpp  # [str(gnuradio_extra_pin).startswith("3.8")]
    # need python in host for cross-compilation so cross-python will work
    - python  # [build_platform != target_platform]
  run:
    # pulled in by gnuradio-core and linked against, so include explicitly
    - log4cpp  # [str(gnuradio_extra_pin).startswith("3.8")]
    # need python in run so linter doesn't complain b/c also in host
    - python  # [build_platform != target_platform]

test:
  requires:
    - coreutils  # [not win]
  commands:
    - test -f $PREFIX/bin/gqrx  # [not win]
    - if not exist %PREFIX%\\Library\\bin\\gqrx.exe exit 1  # [win]
    - xvfb-run -a -s "-screen 0 1024x768x24" bash -c 'timeout --preserve-status 10 gqrx -r || [[ $? -eq 143 ]]'  # [linux and x86_64]
    - timeout --preserve-status 10 gqrx -r || [[ $? -eq 143 ]]  # [not linux and not win]
    - start gqrx -r && ping -n 30 127.0.0.1 >nul && taskkill /im gqrx.exe /f  # [win]

app:
  entry: gqrx --edit
  icon: gqrx-icon.png
  summary: gqrx
  type: desk

about:
  home: https://gqrx.dk/
  license: GPL-3.0-or-later AND Apache-2.0
  license_family: GPL
  license_file:
    - COPYING
    - LICENSE-CTK
  summary: Software defined radio receiver powered by GNU Radio and Qt
  description: |
    Gqrx is an open source software defined radio (SDR) receiver implemented using GNU
    Radio and the Qt GUI toolkit. Currently it works on Linux and Mac with hardware
    supported by gr-osmosdr, including Funcube Dongle, RTL-SDR, Airspy, HackRF,
    BladeRF, RFSpace, USRP and SoapySDR.

    Gqrx can operate as an AM/FM/SSB receiver with audio output or as an FFT-only
    instrument. There are also various hooks for interacting with external application
    using network sockets.
  dev_url: https://github.com/gqrx-sdr/gqrx

extra:
  recipe-maintainers:
    - ryanvolz
